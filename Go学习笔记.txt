
https://tour.go-zh.org/welcome/1
-----------------------------------------------------------------------------------------------------------
// 每个 Go 程序都是由包构成的。 
// 程序从 main 包开始运行。 
-----------------------------------------------------------------------------------------------------------
package main

import (// 使用分组导入语句
	"fmt"
	"math"
	"math/rand"
	"math/cmplx"
)// 按照约定，包名与导入路径的最后一个元素一致。例如，"math/rand" 包中的源码均以 package rand 语句开始。

func add(x int, y int) int {// 也可以是func add(x, y int) int {
	return x + y
}

func swap(x, y string) (string, string) {// 函数可以返回任意数量的返回值。 
	return y, x
}

func split(sum int) (x, y int) {// Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。返回值的名称应当具有一定的意义，它可以作为文档使用。
	x = sum * 4 / 9
	y = sum - x
	return// 没有参数的 return 语句返回已命名的返回值。也就是 直接 返回。 
}//直接返回语句应当仅用在这样的短函数中。在长的函数中它们会影响代码的可读性。 

// var 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后。
var c, python, java bool
var i, j int = 1, 2

var (
	ToBe   bool       = false
	MaxInt uint64     = 1<<64 - 1
	z      complex128 = cmplx.Sqrt(-5 + 12i)
)

const Pi = 3.14// 常量不能用 := 语法声明。 

const (
	// 将 1 左移 100 位来创建一个非常大的数字
	// 即这个数的二进制是 1 后面跟着 100 个 0
	Big = 1 << 100
	// 再往右移 99 位，即 Small = 1 << 1，或者说 Small = 2
	Small = Big >> 99
)

func needInt(x int) int { return x*10 + 1 }

func main() {
	fmt.Println("My favorite number is", rand.Intn(10))
	fmt.Printf("Now you have %g problems.\n", math.Sqrt(7))
	fmt.Println(math.Pi)// 如果一个名字以大写字母开头，那么它就是已导出的。在导入一个包时，你只能引用其中已导出的名字。任何“未导出”的名字在该包外均无法访问。 
	fmt.Println(add(42, 13))
	a, b := swap("hello", "world")
	fmt.Println(a, b)
	fmt.Println(split(17))
	// var i int
	fmt.Println(i, c, python, java)
	// var c, python, java = true, false, "no!"// 如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。 
	// fmt.Println(i, j, c, python, java)
	k := 3// 简洁赋值语句 := 可在类型明确的地方代替 var 声明。
	c, python, java := true, false, "no!"
	fmt.Println(i, j, k, c, python, java)
	fmt.Printf("Type: %T Value: %v\n", ToBe, ToBe)
	fmt.Printf("Type: %T Value: %v\n", MaxInt, MaxInt)
	fmt.Printf("Type: %T Value: %v\n", z, z)
	var f float64 = math.Sqrt(float64(x*x + y*y))// 更加简单的形式：f := float64(i)
	fmt.Println("Happy", Pi, "Day")
	const Truth = true// 常量可以是字符、字符串、布尔值或数值。
	fmt.Println("Go rules?", Truth)
	fmt.Println(needInt(Small))// int 类型最大可以存储一个 64 位的整数，有时会更小，根据平台不同。
}
-----------------------------------------------------------------------------------------------------------
Go 的基本类型有 
bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // uint8 的别名

rune // int32 的别名
    // 表示一个 Unicode 码点

float32 float64

complex64 complex128

// int, uint 和 uintptr 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽。
// 当你需要一个整数值时应使用 int 类型，除非你有特殊的理由使用固定大小或无符号的整数类型。

// 没有明确初始值的变量声明会被赋予它们的 零值。 
// 零值是： 
// 数值类型为 0，
// 布尔类型为 false，
// 字符串为 ""（空字符串）。

// 在声明一个变量而不指定其类型时（即使用不带类型的 := 语法或 var = 表达式语法），变量的类型由右值推导得出。 
// 不过当右边包含未指明类型的数值常量时，新变量的类型就可能是 int, float64 或 complex128 了，这取决于常量的精度： 
// i := 42           // int
// f := 3.142        // float64
// g := 0.867 + 0.5i // complex128
-----------------------------------------------------------------------------------------------------------
// Go 只有一种循环结构：for 循环。 
// 基本的 for 循环由三部分组成，它们用分号隔开： 
// 		初始化语句：在第一次迭代前执行
// 		条件表达式：在每次迭代前求值
// 		后置语句：在每次迭代的结尾执行
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	sum := 0
	for i := 0; i < 10; i++ {// 没有小括号， 大括号 { } 则是必须的。 
		sum += i
	}
	fmt.Println(sum)
}

func main() {
	sum := 1
	for ; sum < 1000; {// 初始化语句和后置语句是可选的。
		sum += sum
	}
	fmt.Println(sum)
}

func main() {
	sum := 1
	for sum < 1000 {// 可以去掉分号
		sum += sum
	}
	fmt.Println(sum)
}

func main() {
	for {// 无限循环
	}
}
-----------------------------------------------------------------------------------------------------------
// if 语句与 for 循环类似
-----------------------------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"math"
)

func sqrt(x float64) string {
	if x < 0 {
		return sqrt(-x) + "i"
	}
	return fmt.Sprint(math.Sqrt(x))
}

func Sqrt2(x float64) string {
	if x < 0 {
		return Sqrt(-x) + "i"
	}
	z := float64(1)
	lastz := z
	z -= (z*z - x) / (2*z)
	for (lastz - z > 0.001)||(lastz - z < -0.001) {
		lastz = z
		z -= (z*z - x) / (2*z)
	}
	return fmt.Sprint(z)
}

func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim {// 同 for 一样， if 语句可以在条件表达式前执行一个简单的语句。
		return v
	}
	return lim
}

func pow2(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim {
		return v
	} else {// 在 if 的简短语句中声明的变量同样可以在任何对应的 else 块中使用。
		fmt.Printf("%g >= %g\n", v, lim)
	}
	// 这里开始就不能使用 v 了
	return lim
}

func main() {
	fmt.Println(sqrt(2), sqrt(-4))
	fmt.Println(
		pow(3, 2, 10),
		pow2(3, 3, 20),
	)
}
-----------------------------------------------------------------------------------------------------------
func InvSqrt(x float32) string {// 卡马克 快速平方根
	if x < 0 {
		return InvSqrt(-x) + "i"
	}
    var xhalf float32 = 0.5*x
    i := math.Float32bits(x)
    i = 0x5f3759df - (i>>1) // gives initial guess y0 //实际使用
	// 0x5f375a86// 测试使用
	// 0x5f37642f// 理论使用
    x = math.Float32frombits(i)
    x = x*(1.5-xhalf*x*x) // Newton step, repeating increases accuracy
    x = x*(1.5-xhalf*x*x)
    x = x*(1.5-xhalf*x*x)
	return fmt.Sprint(1/x)
}
-----------------------------------------------------------------------------------------------------------
switch 是编写一连串 if - else 语句的简便方法。它运行第一个值等于条件表达式的 case 语句。 
Go 只运行选定的 case，而非之后所有的 case。
实际上，Go 自动提供了在这些语言中每个 case 后面所需的 break 语句。 
除非以 fallthrough 语句结束，否则分支会自动终止。 
Go 的另一点重要的不同在于 switch 的 case 无需为常量，且取值不必为整数。 
-----------------------------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"runtime"
	"time"
)

func main() {
	fmt.Print("Go runs on ")
	switch os := runtime.GOOS; os {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.\n", os)
	}
	t := time.Now()
	switch {
	case t.Hour() < 12:
		fmt.Println("Good morning!")
	case t.Hour() < 17:
		fmt.Println("Good afternoon.")
	default:
		fmt.Println("Good evening.")
	}
}
-----------------------------------------------------------------------------------------------------------
defer语句会将函数推迟到外层函数返回之后执行。
推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。 
推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。 
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	fmt.Println("counting")

	for i := 0; i < 10; i++ {
		defer fmt.Println(i)
	}

	fmt.Println("done")
}
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
Go 拥有指针。指针保存了值的内存地址。
类型 *T 是指向 T 类型值的指针。其零值为 nil。
& 操作符会生成一个指向其操作数的指针。 
* 操作符表示指针指向的底层值。
Go 没有指针运算。
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	i, j := 42, 2701
	var m *int
	fmt.Println(m)	// <nil>
	p := &i         // 指向 i
	fmt.Println(*p) // 通过指针读取 i 的值
	*p = 21         // 通过指针设置 i 的值
	fmt.Println(i)  // 查看 i 的值

	p = &j         // 指向 j
	*p = *p / 37   // 通过指针对 j 进行除法运算
	fmt.Println(j) // 查看 j 的值
}
-----------------------------------------------------------------------------------------------------------
一个结构体（struct）就是一组字段（field）。
结构体字段使用点号来访问。 
结构体字段可以通过结构体指针来访问，允许使用隐式间接引用，直接写 p.X 就可以。
结构体文法通过直接列出字段的值来新分配一个结构体。 
使用 Name: 语法可以仅列出部分字段。（字段名的顺序无关。）
特殊的前缀 & 返回一个指向结构体的指针。 
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

type Vertex struct {
	X int
	Y int
}

var (
	v1 = Vertex{1, 2}  // 创建一个 Vertex 类型的结构体
	v2 = Vertex{X: 1}  // Y:0 被隐式地赋予
	v3 = Vertex{}      // X:0 Y:0
	p  = &Vertex{1, 2} // 创建一个 *Vertex 类型的结构体（指针）
)

func main() {
	fmt.Println(Vertex{1, 2})
	v := Vertex{1, 2}
	v.X = 4
	fmt.Println(v.X)
	p := &v
	p.X = 1e9
	fmt.Println(v)
	fmt.Println(v1, p, v2, v3)
}
-----------------------------------------------------------------------------------------------------------
类型 [n]T 表示拥有 n 个 T 类型的值的数组。
数组不能改变大小。
而切片则为数组元素提供动态大小的、灵活的视角。
类型 []T 表示一个元素类型为 T 的切片。
切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔： 
a[low : high]
它会选择一个半开区间，包括第一个元素，但排除最后一个元素。
切片并不存储任何数据，它只是描述了底层数组中的一段。 
更改切片的元素会修改其底层数组中对应的元素。 
与它共享底层数组的切片都会观测到这些修改。 
切片文法类似于没有长度的数组文法。 
在进行切片时，你可以利用它的默认行为来忽略上下界。 
切片下界的默认值为 0，上界则是该切片的长度。 
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	var a [2]string
	a[0] = "Hello"
	a[1] = "World"
	fmt.Println(a[0], a[1])
	fmt.Println(a)
	primes := [6]int{2, 3, 5, 7, 11, 13}
	fmt.Println(primes)
	
	var s []int = primes[1:4]
	fmt.Println(s)
	
	names := [4]string{
		"John",
		"Paul",
		"George",
		"Ringo",
	}
	fmt.Println(names)
	a := names[0:2]
	b := names[1:3]
	fmt.Println(a, b)
	b[0] = "XXX"
	fmt.Println(a, b)
	fmt.Println(names)
	
	q := []int{2, 3, 5, 7, 11, 13}
	fmt.Println(q)
	r := []bool{true, false, true, true, false, true}
	fmt.Println(r)
	s := []struct {
		i int
		b bool
	}{
		{2, true},
		{3, false},
		{5, true},
		{7, true},
		{11, false},
		{13, true},
	}
	fmt.Println(s)
	
	s := []int{2, 3, 5, 7, 11, 13}
	s = s[1:4]
	fmt.Println(s)// {3,5,7}
	s = s[:2]
	fmt.Println(s)// {3,5}
	s = s[1:]
	fmt.Println(s)// {5}
}
-----------------------------------------------------------------------------------------------------------
切片的长度与容量
切片拥有 长度 和 容量。 
切片的长度就是它所包含的元素个数。 
切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。 
切片 s 的长度和容量可通过表达式 len(s) 和 cap(s) 来获取。 
nil 切片
切片的零值是 nil。 
nil 切片的长度和容量为 0 且没有底层数组。 
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	s := []int{2, 3, 5, 7, 11, 13}
	printSlice(s)

	// 截取切片使其长度为 0
	s = s[:0]
	printSlice(s)

	// 拓展其长度
	s = s[:4]
	printSlice(s)

	// 舍弃前两个值
	s = s[2:]
	printSlice(s)
}

func printSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}

//func main() {
//	var s []int
//	fmt.Println(s, len(s), cap(s))
//	if s == nil {
//		fmt.Println("nil!")
//	}
//}
-----------------------------------------------------------------------------------------------------------
用 make 创建切片
切片可以用内建函数 make 来创建，这也是创建动态数组的方式。
make 函数会分配一个元素为零值的数组并返回一个引用了它的切片：
a := make([]int, 5)  // len(a)=5
要指定它的容量，需向 make 传入第三个参数： 
b := make([]int, 0, 5) // len(b)=0, cap(b)=5
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	a := make([]int, 5)
	printSlice("a", a)

	b := make([]int, 0, 5)
	printSlice("b", b)

	c := b[:2]
	printSlice("c", c)

	d := c[2:5]
	printSlice("d", d)
}

func printSlice(s string, x []int) {
	fmt.Printf("%s len=%d cap=%d %v\n",
		s, len(x), cap(x), x)
}
-----------------------------------------------------------------------------------------------------------
切片的切片
切片可包含任何类型，甚至包括其它的切片。 
-----------------------------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"strings"
)

func main() {
	// 创建一个井字板（经典游戏）
	board := [][]string{
		[]string{"_", "_", "_"},
		[]string{"_", "_", "_"},
		[]string{"_", "_", "_"},
	}

	// 两个玩家轮流打上 X 和 O
	board[0][0] = "X"
	board[2][2] = "O"
	board[1][2] = "X"
	board[1][0] = "O"
	board[0][2] = "X"

	for i := 0; i < len(board); i++ {
		fmt.Printf("%s\n", strings.Join(board[i], " "))
	}
}
-----------------------------------------------------------------------------------------------------------
向切片追加元素
为切片追加新的元素是种常用的操作，为此 Go 提供了内建的 append 函数。内建函数的文档对此函数有详细的介绍。 
func append(s []T, vs ...T) []T
append 的第一个参数 s 是一个元素类型为 T 的切片，其余类型为 T 的值将会追加到该切片的末尾。 
append 的结果是一个包含原切片所有元素加上新添加元素的切片。 
当 s 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组。 
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	var s []int
	printSlice(s)

	// 添加一个空切片
	s = append(s, 0)
	printSlice(s)

	// 这个切片会按需增长
	s = append(s, 1)
	printSlice(s)

	// 可以一次性添加多个元素
	s = append(s, 2, 3, 4)
	printSlice(s)
}

func printSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}
-----------------------------------------------------------------------------------------------------------
Range
for 循环的 range 形式可遍历切片或映射。 
当使用 for 循环遍历切片时，每次迭代都会返回两个值。
第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本

可以将下标或值赋予 _ 来忽略它。 
for i, _ := range pow
for _, value := range pow
若只需要索引，忽略第二个变量即可。 
for i := range pow
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}

func main() {
	for i, v := range pow {
		fmt.Printf("2**%d = %d\n", i, v)
	}
	
	pow := make([]int, 10)
	for i := range pow {
		pow[i] = 1 << uint(i) // == 2**i
	}
	for _, value := range pow {
		fmt.Printf("%d\n", value)
	}
}
-----------------------------------------------------------------------------------------------------------
映射
映射将键映射到值。 
映射的零值为 nil 。nil 映射既没有键，也不能添加键。 
make 函数会返回给定类型的映射，并将其初始化备用。 
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

type Vertex struct {
	Lat, Long float64
}

var m map[string]Vertex

var n = map[string]Vertex{// 映射的文法与结构体相似，不过必须有键名。
	"Bell Labs": Vertex{// 若顶级类型只是一个类型名，你可以在文法的元素中省略它。 即可以省略该行的Vertex
		40.68433, -74.39967,
	},
	"Google": Vertex{
		37.42202, -122.08408,
	},
}

func main() {
	m = make(map[string]Vertex)
	m["Bell Labs"] = Vertex{
		40.68433, -74.39967,
	}
	fmt.Println(m["Bell Labs"])
	
	fmt.Println(n)
	
	o := make(map[string]int)
	o["Answer"] = 42// 插入
	fmt.Println("The value:", o["Answer"])
	o["Answer"] = 48// 修改
	fmt.Println("The value:", o["Answer"])
	delete(o, "Answer")// 删除
	fmt.Println("The value:", o["Answer"])
	v, ok := o["Answer"]// 通过双赋值检测某个键是否存在 若 key 在 m 中，ok 为 true ；否则，ok 为 false。 若 key 不在映射中，那么 elem 是该映射元素类型的零值。
	fmt.Println("The value:", v, "Present?", ok)
}
-----------------------------------------------------------------------------------------------------------
package main

import (
	"golang.org/x/tour/wc"
	"strings"
)

func WordCount(s string) map[string]int {// 返回一个映射，其中包含字符串 s 中每个“单词”的个数
	o := make(map[string]int)
	ss := strings.Fields(s)// 返回由空格分隔的字符串数组
	for _, value := range ss{
		_, ok := o[value]
		if ok == false {
			o[value]=1
		} else {
			o[value]++
		}
	}
	return o
}

func main() {
	wc.Test(WordCount)
}
-----------------------------------------------------------------------------------------------------------
函数值可以用作函数的参数或返回值。 
-----------------------------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"math"
)

func compute(fn func(float64, float64) float64) float64 {
	return fn(3, 4)
}

func main() {
	hypot := func(x, y float64) float64 {
		return math.Sqrt(x*x + y*y)
	}
	fmt.Println(hypot(5, 12))
	fmt.Println(compute(hypot))
	fmt.Println(compute(math.Pow))
}
-----------------------------------------------------------------------------------------------------------
Go 函数可以是一个闭包。
闭包是一个函数值，它引用了其函数体之外的变量。
该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。 
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

func adder() func(int) int {// 累加
	sum := 0
	return func(x int) int {
		sum += x
		return sum
	}
}

func main() {
	pos, neg := adder(), adder()
	for i := 0; i < 10; i++ {
		fmt.Println(
			pos(i),
			neg(-2*i),
		)
	}
}
-----------------------------------------------------------------------------------------------------------
实现一个 fibonacci 函数，它返回一个函数（闭包），该闭包返回一个斐波纳契数列 `(0, 1, 1, 2, 3, 5, ...)`。 
-----------------------------------------------------------------------------------------------------------
package main

import "fmt"

// 返回一个“返回int的函数”
func fibonacci() func() int {
	tem := 0
	return func() int {
		if tem == 0 {
			tem++
			return 0
		}
		if tem == 1 {
			tem++
			return 1
		}
		f1 := 1
		f2 := 0
		fn := 0
		for i := 2;i <= tem;i++ {
			fn = f2+f1
			f2 = f1
			f1 = fn
		}
		tem++
		return fn
	}
}

func main() {
	f := fibonacci()
	for i := 0; i < 10; i++ {
		fmt.Println(f())
	}
}
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
方法
Go 没有类。不过你可以为结构体类型定义方法。 
方法就是一类带特殊的 接收者 参数的函数。 
方法接收者在它自己的参数列表内，位于 func 关键字和方法名之间。
-----------------------------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"math"
)

type Vertex struct {
	X, Y float64
}

func (v Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
	v := Vertex{3, 4}
	fmt.Println(v.Abs())
}
-----------------------------------------------------------------------------------------------------------
方法只是个带接收者参数的函数。 
-----------------------------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"math"
)

type Vertex struct {
	X, Y float64
}
// 这个 Abs 的写法就是个正常的函数，功能并没有什么变化。
func Abs(v Vertex) float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
	v := Vertex{3, 4}
	fmt.Println(Abs(v))
}
-----------------------------------------------------------------------------------------------------------
也可以为非结构体类型声明方法。 
只能为在同一包内定义的类型的接收者声明方法，
而不能为其它包内定义的类型（包括 int 之类的内建类型）的接收者声明方法。
就是接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明方法。
-----------------------------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"math"
)

type MyFloat float64

func (f MyFloat) Abs() float64 {
	if f < 0 {
		return float64(-f)
	}
	return float64(f)
}

func main() {
	f := MyFloat(-math.Sqrt2)
	fmt.Println(f.Abs())
}
-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------